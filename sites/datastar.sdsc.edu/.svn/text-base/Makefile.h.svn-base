# FLASH makefile definitions for SDSC DataStar IBM Power4 running AIX
#
# compiler version:
#    /usr/bin/lslpp -lc | /usr/bin/grep xlfrte: | /usr/bin/head -1 | /usr/bin/cut -f3 -d:
#    strings /usr/lpp/xlf/bin/default_msg/xlfver.cat
#    lslpp -h "*xlfcmp*"
#    what /usr/lpp/xlf/bin/xlfentry
#
# AIX 5.2
# xlf 8.1.1.6
# hdf5-1.6.2

#----------------------------------------------------------------------------
# Set the HDF/HDF5 library paths -- these need to be updated for your system
#----------------------------------------------------------------------------

HDF5_PATH = /usr/local/apps/phdf5/

PAPI_PATH  =
PAPI_FLAGS =

NCMPI_PATH =
MPE_PATH   =

#----------------------------------------------------------------------------
# Compiler and linker commands
#
#  We use the f90 compiler as the linker, so some C libraries may explicitly
#  need to be added into the link line.
#----------------------------------------------------------------------------

FCOMP   = mpxlf90_r
CCOMP   = mpcc_r
CPPCOMP = mpCC_r
LINK    = mpxlf90_r

#----------------------------------------------------------------------------
# Compilation flags
#
#  Three sets of compilation/linking flags are defined: one for optimized
#  code, one for testing, and one for debugging.  The default is to use the 
#  _OPT version.  Specifying -debug to setup will pick the _DEBUG version,
#  these should enable bounds checking.  Specifying -test is used for 
#  flash_test, and is set for quick code generation, and (sometimes) 
#  profiling.  The Makefile generated by setup will assign the generic token 
#  (ex. FFLAGS) to the proper set of flags (ex. FFLAGS_OPT).
#----------------------------------------------------------------------------

FFLAGS_OPT   = -O5 -qfixed -c -q64 -qintsize=4 -qrealsize=8 -qzerosize -cpp \
               -qalias=noaryovrlp -qcache=auto -qtune=auto -qarch=auto 
FFLAGS_DEBUG = -g  -qfixed -c -q64 -qintsize=4 -qrealsize=8 -qzerosize -cpp
FFLAGS_TEST  = -O2 -qfixed -c -q64 -qintsize=4 -qrealsize=8 -qzerosize -cpp

F90FLAGS     = -qsuffix=f=F90:cpp=F90 -qfree=f90
f90FLAGS     = -qsuffix=f=F90:cpp=F90 -qfree=f90

CFLAGS_OPT   = -q64 -O2 -c -DIBM -DNOUNDERSCORE \
               -qcache=auto -qtune=auto -qarch=auto
CFLAGS_DEBUG = -q64 -g  -c -DIBM -DNOUNDERSCORE
CFLAGS_TEST  = -q64 -O2 -c -DIBM -DNOUNDERSCORE

# if we are using HDF5, we need to specify the path to the include files
CFLAGS_HDF5  = -I$(HDF5_PATH)/include

CFLAGS_NCMPI =

MDEFS        = -WF,

#----------------------------------------------------------------------------
# Linker flags
#
#  There is a seperate version of the linker flags for each of the _OPT, 
#  _DEBUG, and _TEST cases.
#----------------------------------------------------------------------------

LFLAGS_OPT   = -q64 -bmaxdata:0x80000000 -qipa -o
LFLAGS_DEBUG = -q64 -bmaxdata:0x80000000 -bnoquiet -bloadmap:flash_linking_diagnostics -o
LFLAGS_TEST  = -q64 -bmaxdata:0x80000000 -o

#----------------------------------------------------------------------------
# Library specific linking
#
#  If a FLASH module has a 'LIBRARY xxx' line in its Config file, we need to
#  create a macro in this Makefile.h for LIB_xxx, which will be added to the
#  link line when FLASH is built.  This allows us to switch between different
#  (incompatible) libraries.  We also create a _OPT, _DEBUG, and _TEST
#  library macro to add any performance-minded libraries (like fast math),
#  depending on how FLASH was setup.
#----------------------------------------------------------------------------

LIB_HDF5     = -L$(HDF5_PATH)/lib -lhdf5 -lz -lsz
LIB_MPI      =

LIB_NCMPI    =
LIB_MPE      =
LIB_MATH     = -lessl

#----------------------------------------------------------------------------
# Additional machine-dependent object files
#
#  Add any machine specific files here -- they will be compiled and linked
#  when FLASH is built.
#----------------------------------------------------------------------------

MACHOBJ = 

#----------------------------------------------------------------------------
# Additional commands
#---------------------------------------------------------------------------- 

MV = mv -f
AR = ar -r
RM = rm -f
CD = cd
RL = ranlib
ECHO = echo
