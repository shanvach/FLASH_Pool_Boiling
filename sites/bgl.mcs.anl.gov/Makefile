#  Makefile for FLASH code.  Automatically generated by setup script.
#  Do not edit!

include /home/sameer/tau/bgl/lib/Makefile.tau-memory-mpi-pdt
ifdef PDTDIR
PDB=merged.pdb
endif

EXE = flash2

default : $(PDB) $(EXE)

merged.pdb:
	$(PDTDIR)/$(PDTARCHDIR)/bin/f95parse *.F90 -omerged.pdb


#	Machine-dependent include file

CDEFINES =  -DN_DIM=3 -DMAXBLOCKS=225 -DNXB=16 -DNYB=16 -DNZB=16
FDEFINES = $(MDEFS)-DN_DIM=3 $(MDEFS)-DMAXBLOCKS=225 $(MDEFS)-DNXB=16 $(MDEFS)-DNYB=16 $(MDEFS)-DNZB=16 

#	print the compiler flags to file in FLASH/object/
#	(files name are also hard-coded into source/util/tools/compiler_flags.c)
PRINT_F_FLAGS = $(ECHO) $(FCOMP) $(FFLAGS) $(FDEFINES) > f_compiler_flags
PRINT_C_FLAGS = $(ECHO) $(CCOMP) $(CFLAGS) $(CDEFINES)  > c_compiler_flags
PRINT_LFLAGS = $(ECHO) $(LFLAGS) > loader_flags

include Makefile.h

FFLAGS := $(FFLAGS_OPT)
LFLAGS := $(LFLAGS_OPT)
LIB := $(LIB_OPT)
CFLAGS := $(CFLAGS_OPT)


#	Compile



.SUFFIXES:

.SUFFIXES: .f .F .f90 .F90 .c .C .o
  
.f.o :
	$(FCOMP) $(FFLAGS) $(FDEFINES) $*.f
.F.o :
	$(FCOMP) $(FFLAGS) $(FDEFINES) $*.F
.f90.o :
	$(FCOMP) $(FFLAGS) $(f90FLAGS) $(FDEFINES) $*.f90
.F90.o :
	$(FCOMP) $(FFLAGS) $(F90FLAGS) $(FDEFINES) $*.F90
.c.o :
	$(CCOMP) $(CFLAGS) $(CDEFINES) $*.c
.C.o :
	$(CPPCOMP) $(CFLAGS) $(CDEFINES) $*.C
%API.c %API.h %API-bridges.F90: %.int
	./int2API.py $<

.PRECIOUS: %API.c %API.h %API-bridges.F90

# Note, the tmpfiles are needed to ensure that the following routines
# get recompiled every time.  Parallel builds (e.g. gmake -j 4) complicate
# this process, by requiring that the source (e.g. buildstamp.f) is generated
# by the same set of rules (and therefore same process) as the object file

#       Buildstamp routine

buildstamp.o : .buildstamp_tmpfile
	./make_bstamp
	$(FCOMP) $(FFLAGS) $(FFIXED) buildstamp.f
#	$(RM) buildstamp.f
	$(RM) .buildstamp_tmpfile

.buildstamp_tmpfile :
	touch .buildstamp_tmpfile


#       Release routine

flash_release.o : .flash_release_tmpfile
	./make_release
	$(FCOMP) $(FFLAGS) flash_release.f
	$(RM) flash_release.f
	$(RM) .flash_release_tmpfile

.flash_release_tmpfile :
	touch .flash_release_tmpfile

#       Build statistics routine

buildstats.o : .buildstats_tmpfile
	$(PRINT_F_FLAGS)
	$(PRINT_C_FLAGS)
	$(PRINT_LFLAGS)
	./make_bstats
	$(FCOMP) $(FFLAGS) $(F90FLAGS) buildstats.F90
#	$(RM) buildstats.F90
	$(RM) .buildstats_tmpfile

.buildstats_tmpfile :
	touch .buildstats_tmpfile


#       FLASH Modules routine

flashModules.o : 
	./make_flashModules
	$(FCOMP) $(FFLAGS) $(F90FLAGS) flashModules.F90
	$(RM) flashModules.F90


#	Module Makefiles

include Makefile.cosmology
include Makefile.database
include Makefile.driver
include Makefile.formulation
include Makefile.front_track
include Makefile.gravity
include Makefile.hydro
include Makefile.io
include Makefile.materials
include Makefile.mesh
include Makefile.particles
include Makefile.radiation
include Makefile.solvers
include Makefile.source_terms
include Makefile.util
include Makefile.visualization

MODS = \
       $(cosmology) \
       $(database) \
       $(driver) \
       $(formulation) \
       $(front_track) \
       $(gravity) \
       $(hydro) \
       $(io) \
       $(materials) \
       $(mesh) \
       $(particles) \
       $(radiation) \
       $(solvers) \
       $(source_terms) \
       $(util) \
       $(visualization) \
       $(MACHOBJ) buildstamp.o flash_release.o buildstats.o flashModules.o 

#	Link

$(EXE) : $(MODS)
	$(LINK) $(LFLAGS) $(EXE) $(MODS) $(LIB) $(CONFIG_LIB)
	$(ECHO) SUCCESS

#	Clean up object directory

clean :
	$(RM) *.o *.a *.mod *API.h *API.c *API-bridges.F90 $(PDB)

precision_test : precision_test.o
	$(LINK) $(LFLAGS) precision_test precision_test.o
