# FLASH makefile definitions for x86-64 Linux (GNU compilers)
#----------------------------------------------------------------------------
# Set the CHOMBO/HDF5/MPI library paths -- these need to be updated for your system
#----------------------------------------------------------------------------

CHOMBO_PATH = /home/chris/chomboForFlash/current
MPI_PATH = /home/chris/software/mpich2/1.3/gcc-4.5.1
HDF4_PATH =
HDF5_PATH = /home/chris/software/hdf5/1.8.5/gcc-4.5.1

ZLIB_PATH  =

PAPI_PATH  =
PAPI_FLAGS =

NCMPI_PATH =
MPE_PATH   =


#----------------------------------------------------------------------------
# Extract Chombo build information
# (A user should only need to specify a correct CHOMBO_PATH to obtain
#  correct CFLAGS_CHOMBO and LIB_CHOMBO macros)
#----------------------------------------------------------------------------

_DIM = $(shell grep "define NDIM" Flash.h | cut -d " " -f 3)
_CPP = $(shell make vars DIM=${_DIM} -C ${CHOMBO_PATH}/lib | \
	 awk -F 'CPPFLAGS=' '/^CPPFLAGS/{print $$2}')
_LIB = $(shell make vars DIM=${_DIM} -C ${CHOMBO_PATH}/lib | \
	 awk -F 'config=' '/^config/{print $$2}')


#----------------------------------------------------------------------------
# Compiler and linker commands
#
#   Use the MPICH wrappers around the compilers -- these will automatically
#   load the proper libraries and include files.  Version of MPICH prior
#   to 1.2.2 (?) do not recognize .F90 as a valid Fortran file extension.
#   You need to edit mpif90 and add .F90 to the test of filename extensions,
#   or upgrade your MPICH.
#----------------------------------------------------------------------------

FCOMP   = ${MPI_PATH}/bin/mpif90
CCOMP   = ${MPI_PATH}/bin/mpicc
CPPCOMP = ${MPI_PATH}/bin/mpicxx
LINK    = ${MPI_PATH}/bin/mpif90

# pre-processor flag
PP      = -D

#----------------------------------------------------------------------------
# Compilation flags
#
#  Three sets of compilation/linking flags are defined: one for optimized
#  code, one for testing, and one for debugging.  The default is to use the
#  _OPT version.  Specifying -debug to setup will pick the _DEBUG version,
#  these should enable bounds checking.  Specifying _TEST is used for
#  flash_test, and is set for quick code generation, and (sometimes)
#  profiling.  The Makefile generated by setup will assign the generic token
#  (ex. FFLAGS) to the proper set of flags (ex. FFLAGS_OPT).
#----------------------------------------------------------------------------

FFLAGS_OPT = -ggdb -c -O2 -fdefault-real-8 -fdefault-double-8 \
-ffree-line-length-none -Wuninitialized

FFLAGS_DEBUG = -ggdb -c -fdefault-real-8 -fdefault-double-8 \
-ffree-line-length-none -pedantic -Wall -Wextra -Waliasing \
-Wsurprising -Wconversion -Wunderflow \
-ffpe-trap=invalid,zero,overflow -fcheck=all \
-fbacktrace -fdump-core -finit-real=snan \
-finit-integer=-999999 -fimplicit-none -fstack-protector-all

FFLAGS_TEST = -ggdb -c -fdefault-real-8 -fdefault-double-8 \
-ffree-line-length-none

F90FLAGS =


#The macro _FORTIFY_SOURCE adds some lightweight checks for buffer
#overflows at both compile time and run time (only active at -O1 or higher)
#http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
CFLAGS_OPT = -ggdb -c -O2 -Wuninitialized -D_FORTIFY_SOURCE=2

CFLAGS_DEBUG = -ggdb -c -Wno-div-by-zero -Wundef -Wtype-limits \
-Wconversion -Wstrict-prototypes -Wunreachable-code \
-pedantic -Wall -Wextra -Winit-self -ftree-vrp -Wfloat-equal \
-Wunsafe-loop-optimizations -Wpadded -fstack-protector-all

CFLAGS_TEST = -ggdb -c


# if we are using HDF5, we need to specify the path to the include files
CFLAGS_HDF5 = -I ${HDF5_PATH}/include -DH5_USE_16_API
CFLAGS_NCMPI = -I ${NCMPI_PATH}/include
CFLAGS_CHOMBO = -I${CHOMBO_PATH}/lib/include ${_CPP} -DCH_LANG_CC

#----------------------------------------------------------------------------
# Linker flags
#
#  There is a seperate version of the linker flags for each of the _OPT,
#  _DEBUG, and _TEST cases.
#----------------------------------------------------------------------------

LFLAGS_OPT   = -ggdb -o
LFLAGS_DEBUG = -ggdb -o
LFLAGS_TEST  = -ggdb -o


#----------------------------------------------------------------------------
# Library specific linking
#
#  If a FLASH module has a 'LIBRARY xxx' line in its Config file, we need to
#  create a macro in this Makefile.h for LIB_xxx, which will be added to the
#  link line when FLASH is built.  This allows us to switch between different
#  (incompatible) libraries.  We also create a _OPT, _DEBUG, and _TEST
#  library macro to add any performance-minded libraries (like fast math),
#  depending on how FLASH was setup.
#----------------------------------------------------------------------------

#We can link with the electric-fence library by adding -lefence, but we
#must set the following environmental variable:
#export EF_ALLOW_MALLOC_0=1
#to prevent the following abort during MPI_Init (i'm assuming this is not a bug):
#ElectricFence Aborting: Allocating 0 bytes, probably a bug
LIB_OPT   =
LIB_DEBUG =
LIB_TEST  =

LIB_CHOMBO = -L$(CHOMBO_PATH)/lib \
-lamrtimedependent${_LIB} \
-lamrtools${_LIB} \
-lboxtools${_LIB} \
-lbasetools${_LIB} \
-lstdc++

LIB_HDF4  =
LIB_HDF5  = -L ${HDF5_PATH}/lib -lhdf5 -lz

LIB_PAPI  =
LIB_MATH  =

LIB_MPI   =
LIB_NCMPI = -L ${NCMPI_PATH}/lib -lpnetcdf
LIB_MPE   =

#----------------------------------------------------------------------------
# Additional machine-dependent object files
#
#  Add any machine specific files here -- they will be compiled and linked
#  when FLASH is built.
#----------------------------------------------------------------------------

MACHOBJ =

#----------------------------------------------------------------------------
# Additional commands
#----------------------------------------------------------------------------

MV = mv -f
AR = ar -r
RM = rm -f
CD = cd
RL = ranlib
ECHO = echo
