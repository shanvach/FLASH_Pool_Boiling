# FLASH makefile definitions for ix86 Linux (Absoft compiler)

#----------------------------------------------------------------------------
# Set the HDF/HDF5 library paths -- these need to be updated for your system
#----------------------------------------------------------------------------
HDF5_PATH =  /usr/local/hdf5-gcc
MPI_PATH  =  /usr/local/mpich-1.2.7p1/absoft
HYPRE_PATH = /home/shravang/software/hypre-2.7.0b

ZLIB_PATH  =

PAPI_PATH  =
PAPI_FLAGS =

NCMPI_PATH = /usr/local/pnetcdf-1.0.0

#----------------------------------------------------------------------------
# Compiler and linker commands
#
#   Use the MPICH wrappers around the compilers -- these will automatically
#   load the proper libraries and include files.  Version of MPICH prior
#   to 1.2.2 (?) do not recognize .F90 as a valid Fortran file extension.
#   You need to edit mpif90 and add .F90 to the test of filename extensions,
#   or upgrade your MPICH.
#----------------------------------------------------------------------------
FCOMP   = $(MPI_PATH)/bin/mpif90
CCOMP   = $(MPI_PATH)/bin/mpicc
CPPCOMP = $(MPI_PATH)/bin/mpiCC
LINK    = $(MPI_PATH)/bin/mpif90

# pre-processor flag
PP      = -D

#----------------------------------------------------------------------------
# Compilation flags
#
#  Three sets of compilation/linking flags are defined: one for optimized
#  code, one for testing, and one for debugging.  The default is to use the
#  _OPT version.  Specifying -debug to setup will pick the _DEBUG version,
#  these should enable bounds checking.  Specifying _TEST is used for
#  flash_test, and is set for quick code generation, and (sometimes)
#  profiling.  The Makefile generated by setup will assign the generic token
#  (ex. FFLAGS) to the proper set of flags (ex. FFLAGS_OPT).
#----------------------------------------------------------------------------

#Absoft options are a bit cryptic:
#-en: Warn of non-standard usage.
#-m64: Generate code for AMD 64-bit processors.
#-et: Enable exception traceback
#-trap=INVALID,DIVBYZERO,OVERFLOW: Floating point exception catching.
#-B111: Verify FPU stack (for stack corruption)
#Rb: Check array boundaries.
#Rc: Check array conformance.
#Rs: Check substrings

FFLAGS_OPT = -c -O2 -N113 -en -m64 -safefp +B71
FFLAGS_DEBUG = -g -c -N113 -en -m64 -trap=INVALID,DIVBYZERO,OVERFLOW -B111 -Rb -Rc -Rs -safefp +B71
FFLAGS_TEST = -g -c -N113 -safefp -en -m64 +B71
FFLAGS_HYPRE = -I${HYPRE_PATH}/include
CFLAGS_HYPRE = -I${HYPRE_PATH}/include

F90FLAGS =

CFLAGS_OPT = -O2 -c
CFLAGS_DEBUG = -g -c
CFLAGS_TEST = -g -c

# if we are using HDF5, we need to specify the path to the include files
CFLAGS_HDF5 = -I$(HDF5_PATH)/include

CFLAGS_NCMPI = -I$(NCMPI_PATH)/include

#----------------------------------------------------------------------------
# Linker flags
#
#  There is a seperate version of the linker flags for each of the _OPT,
#  _DEBUG, and _TEST cases.
#----------------------------------------------------------------------------

LFLAGS_OPT   = -o 
LFLAGS_DEBUG = -g -o

LFLAGS_TEST  = -o


#----------------------------------------------------------------------------
# Library specific linking
#
#  If a FLASH module has a 'LIBRARY xxx' line in its Config file, we need to
#  create a macro in this Makefile.h for LIB_xxx, which will be added to the
#  link line when FLASH is built.  This allows us to switch between different
#  (incompatible) libraries.  We also create a _OPT, _DEBUG, and _TEST
#  library macro to add any performance-minded libraries (like fast math),
#  depending on how FLASH was setup.
#----------------------------------------------------------------------------

LIB_OPT   =
LIB_DEBUG =
LIB_TEST  =

LIB_HDF4  = #-lmfhdf -ldf -ljpeg -lz
LIB_HDF5  = -L${HDF5_PATH}/lib -lhdf5 -lz

LIB_PAPI  =
LIB_MATH  = -ldfftw -ldrfftw

LIB_MPI   = 
LIB_NCMPI   = -L$(NCMPI_PATH)/lib -lpnetcdf -L/opt/intel/intel_cc_90_64/lib -lirc
LIB_MPE   =
LIB_HYPRE = -L${HYPRE_PATH}/lib -lHYPRE


#----------------------------------------------------------------------------
# Additional machine-dependent object files
#
#  Add any machine specific files here -- they will be compiled and linked
#  when FLASH is built.
#----------------------------------------------------------------------------

MACHOBJ =

# mod files generated by this compiler uses uppercase BASENAMES
MODUPPERCASE = 1

#----------------------------------------------------------------------------
# Additional commands
#----------------------------------------------------------------------------

MV = mv -f
AR = ar -r
RM = rm -f
CD = cd
RL = ranlib
ECHO = echo



#Use the totalview memory debugger (we overwrite certain Makefile.h variables):

#Specify MEMORY_DEBUG=YES in order to link the totalview memory debugging library.
#When you load totalview, click Help->About Totalview, and check the version matches
#the $(TVIEW) variable.
MEMORY_DEBUG=NO
ifeq ($(MEMORY_DEBUG), YES)

TVIEW = /usr/local/toolworks/totalview.7.3.0-0/linux-x86-64
#TVIEW = /usr/local/toolworks/totalview.8.4.1-4/linux-x86-64
CONFIG_LIB = -L$(TVIEW)/lib -ltvheap_64 -Wl,-rpath,$(TVIEW)/lib

endif



# These particular files are too large to be compiled in debug mode
ifeq ($(FLASHBINARY),true)
FFLAGS_WO_RB = $(filter-out -Rb,$(FFLAGS))
# Compile the following files with the same flags as others (which depend on
# whether -opt, -debug, or -test was in effect for setup), except that
# -Rb is removed. This allows compilation of these files
# with debugging as used on cetus with the Absoft compiler.
gr_hgSetExtBoundary.o : %.o : %.F90
	$(FCOMP) $(FFLAGS_WO_RB) $(F90FLAGS) $(FDEFINES) $<
gr_hg_amr_1blk_bcset_work.o : %.o : %.F90
	$(FCOMP) $(FFLAGS_WO_RB) $(F90FLAGS) $(FDEFINES) $<
mpi_amr_edge_average_vdt.o : %.o : %.F90
	$(FCOMP) $(FFLAGS_WO_RB) $(F90FLAGS) $(FDEFINES) $<
# Uncomment the following lines to compile them in test mode and 
# stop the absoft compiler failing.
#gr_hgSetExtBoundary.o : %.o : %.F90
#	$(FCOMP) $(FFLAGS_TEST) $(F90FLAGS) $(FDEFINES)	$<
#gr_hg_amr_1blk_bcset_work.o : %.o : %.F90
#	$(FCOMP) $(FFLAGS_TEST) $(F90FLAGS) $(FDEFINES)	$<
#mpi_amr_edge_average_vdt.o : %.o : %.F90
#	$(FCOMP) $(FFLAGS_TEST) $(F90FLAGS) $(FDEFINES)	$<
endif



# these particular files break the absoft optimizer... maybe they can be
# tweaked to not break it

#ifeq ($(FLASHBINARY),true)
#gr_getCellFaceArea.o : %.o : %.F90
#	$(FCOMP) $(FFLAGS_TEST) $(F90FLAGS) $(FDEFINES)	$<
#
#mpi_mort_comm_for_surrblks.o mpi_morton_bnd.o : %.o :%.F90
#	$(FCOMP) $(FFLAGS_TEST) $(FDEFINES)	$<
#endif

