# FLASH makefile definitions for titan (cray - compiler)
#
#----------------------------------------------------------------------------
# Set the HDF5/MPI library paths -- these need to be updated for your system
#----------------------------------------------------------------------------

LIB_BASE     = 

#MPI_PATH    = /opt/cray/craype/2.5.13
MPI_PATH     =
HDF4_PATH    =

HDF5_PATH    = /opt/cray/hdf5-parallel/1.8.16/CRAY/8.3
ZLIB_PATH    = 

PAPI_PATH    =
PAPI_FLAGS   =

NCMPI_PATH   = 
MPE_PATH     =

BLAS_PATH    = 
LAPACK_PATH  = 
HYPRE_PATH   = /ccs/home/adhruv/hypre/src/hypre
SUPERLU_PATH = 

# Current directory:
export cur-dir := $(shell pwd)

# Set the location of top directory
export setup_dir = $(cur-dir)

FCOMP   = ${MPI_PATH}ftn
CCOMP   = ${MPI_PATH}cc
CPPCOMP = ${MPI_PATH}CC
LINK    = ${MPI_PATH}ftn

#----------------------------------------------------------------------------
# Compilation flags
#
#  Three sets of compilation/linking flags are defined: one for optimized
#  code, one for testing, and one for debugging.  The default is to use the
#  _OPT version.  Specifying -debug to setup will pick the _DEBUG version,
#  these should enable bounds checking.  Specifying _TEST is used for
#  flash_test, and is set for quick code generation, and (sometimes)
#  profiling.  The Makefile generated by setup will assign the generic token
#  (ex. FFLAGS) to the proper set of flags (ex. FFLAGS_OPT).
#----------------------------------------------------------------------------

FFLAGS_OPT   = -c -O2 -s real64 -s integer32
FFLAGS_DEBUG = -c -G 0 -s real64 -s integer32
FFLAGS_TEST  = -c -s real64 -s integer 32

CFLAGS_OPT   = -c -O3
CFLAGS_DEBUG = -c -O1 -g -dynamic
CFLAGS_TEST  = -c

#If we are using HDF5, we need to specify the path to the include files

FFLAGS_HDF5 = -I${HDF5_PATH}/include -DH5_USE_16_API
CFLAGS_HDF5 = -I${HDF5_PATH}/include -DH5_USE_16_API

FLAGS_MPI   = -I$(MPI_PATH)/include

CFLAGS_BLAS = -I${BLAS_PATH}/include 
FFLAGS_BLAS = -I${BLAS_PATH}/include 

CFLAGS_LAPACK = -I${LAPACK_PATH}/include
FFLAGS_LAPACK = -I${LAPACK_PATH}/include

CFLAGS_SUPERLU = -I${SUPERLU_PATH}/include
FFLAGS_SUPERLU = -I${SUPERLU_PATH}/include

CFLAGS_HYPRE = -I${HYPRE_PATH}/include
FFLAGS_HYPRE = -I${HYPRE_PATH}/include


#----------------------------------------------------------------------------
# Linker flags
#
#  There is a seperate version of the linker flags for each of the _OPT,
#  _DEBUG, and _TEST cases.
#----------------------------------------------------------------------------

LFLAGS_OPT   = -o
LFLAGS_DEBUG = -g -o
LFLAGS_TEST  = -o

#----------------------------------------------------------------------------
# Library specific linking
#
#  If a FLASH module has a 'LIBRARY xxx' line in its Config file, we need to
#  create a macro in this Makefile.h for LIB_xxx, which will be added to the
#  link line when FLASH is built.  This allows us to switch between different
#  (incompatible) libraries.  We also create a _OPT, _DEBUG, and _TEST
#  library macro to add any performance-minded libraries (like fast math),
#  depending on how FLASH was setup.
#----------------------------------------------------------------------------

LIB_OPT   = 
LIB_DEBUG = 
LIB_TEST  =
LIB_HDF4  = 
LIB_HDF5  = -L${HDF5_PATH}/lib -lhdf5_fortran -lhdf5 -lz
LIB_PAPI  =
LIB_MATH  = -limf -lm
LIB_MPI = 
LIB_NCMPI = -L${NCMPI_PATH}/lib -lpnetcdf
LIB_MPE   =

LIB_BLAS    = ${BLAS_PATH}/lib/libopenblas_sandybridgep-r0.2.3.a
LIB_LAPACK  = ${BLAS_PATH}/lib/libopenblas_sandybridgep-r0.2.3.a
LIB_SUPERLU = -L${SUPERLU_PATH}/lib -lsuperlu_4.3 ${BLAS_PATH}/lib/libopenblas_sandybridgep-r0.2.3.a
LIB_HYPRE   = -L${HYPRE_PATH}/lib -lHYPRE 
LIB_STDCXX  = -lstdc++

CONFIG_LIB  = -I/ccs/home/adhruv/TecioLib -L/ccs/home/adhruv/TecioLib -ltecio -lstdc++ 

#----------------------------------------------------------------------------
# Additional machine-dependent object files
#
#  Add any machine specific files here -- they will be compiled and linked
#  when FLASH is built.
#----------------------------------------------------------------------------

MACHOBJ =

#----------------------------------------------------------------------------
# Additional commands
#----------------------------------------------------------------------------

MV = mv -f
AR = xiar -r
RM = rm -f
CD = cd
RL = ranlib
ECHO = echo

ifeq ($(FLASHBINARY),true)


FFLAGS_WO_WARNALL = $(patsubst -pedantic,,$(FFLAGS))

#Files mix and match assumed shape arrays, assumed size arrays
#and scalars in function calls.  This is fine but it is viewed as
#a problem when using strict type checking compiler options.
fftpack.o : %.o : %.f90
	$(FCOMP) $(FFLAGS_WO_WARNALL) $(FDEFINES)       $<
gr_pfftDcftForward.o : %.o : %.F90
	$(FCOMP) $(FFLAGS_WO_WARNALL) $(FDEFINES)       $<
gr_pfftDcftInverse.o : %.o : %.F90
	$(FCOMP) $(FFLAGS_WO_WARNALL) $(FDEFINES)       $<

endif


#Configure lines:
#
# mpich2-1.2.1p1:
#./configure --prefix=/opt/mpich2/1.2.1p1/gcc-4.4.3
#--enable-error-checking=all --enable-error-messages=all 
#--with-pm=gforker:mpd --enable-g=dbg,meminit --enable-fast=defopt 
#--enable-f77 --enable-f90 --enable-cxx --enable-romio --enable-sharedlibs=gcc 
#--with-mpe CC=gcc F77=gfortran F90=gfortran CXX=g++ 2>&1 | tee ../mpich2_1.2.1p1_gcc-4.4.3_build.out
#
# hdf5-1.8.4-patch1:
#./configure --prefix=/opt/hdf5/1.8.4-patch1/gcc-4.4.3 
#CC=mpicc FC=mpif90 CXX=mpicxx --enable-production --enable-debug=all --enable-shared
#--enable-parallel --enable-using-memchecker 2>&1 | tee ../hdf5_1.8.4-patch1_gcc-4.4.3_build.out
#
# parallel-netcdf-1.1.1:
#./configure --prefix=/opt/parallel-netcdf/1.1.1/gcc-4.4.3 
#--enable-fortran --with-mpi=/opt/mpich2/1.2.1p1/gcc-4.4.3 
#CFLAGS="${CFLAGS} -g" 2>&1 | tee ../parallel-netcdf-1.1.1_gcc-4.4.3_build.out
#
# valgrind-3.5.0: (Need to patch because we have a new version of glibc)
#patch -Np0 -i ../valgrind_glibc211.diff || return 1
#autoreconf
#./configure --prefix=/opt/valgrind/3.5.0/gcc-4.4.3
#--without-mpicc 2>&1 | tee ../valgrind-3.5.0_gcc-4.4.3_build.out
