Installing HDF5 1.8

HDF5 1.8 has many new features compared to HDF5 1.6. One of those features is
support for shared Fortran libraries on certain platforms (e.g. Linux).
Unfortunately, the parts of the 'configure' script that deal with this new
feature are broken. There are several workarounds for this, which will be
described here.

The problem manifests itself when one attempts to build parallel HDF5 with
support for both Fortran and shared libraries. The proper way to get all MPI
settings right is to use 'mpicc' as the default C compiler, and 'mpif90' as
the default Fortran compiler. However, if one attempts to do this, the
'configure' script cannot work out which compilers are hidden inside the MPI
wrappers, and gets all the flags wrong, especially those that deal with shared
libraries.

Fortunately, most of the problems will be concentrated in a single file called
'libtool', generated by the 'configure' script. It is then possible to fix
the problems and build HDF5 by patching this file, especially on Linux
systems.

Alternatively, one can attempt to compile parallel HDF5 using the serial C
and Fortran compilers, e.g. gcc/gfortran, and adding all the MPI include
directories, library directories and libraries by hand. However, this needs
to be done very carefully so it will work perfectly. Otherwise the 'configure'
script will become very confused and die with some weird error.

Note that HDF5 has already been installed on the Scarf cluster at RAL.
Type 'module avail' to see which versions are available.

Also note that FLASH uses the HDF5 1.6 interface, which differs from the 1.8
interface. To fix this, compile FLASH with the flag "-DH5_USE_16_API".

I. Compiling HDF5 using mpicc/mpif90 on Linux

In this example, HDF5 is configured to use the MPI compilers. This takes care
of all the MPI settings, but the flags for building a shared library will be
wrong. This is patched afterwards. This approach has been verified on various
Linux distributions (RedHat, SuSE, Ubuntu).

---------

#!/bin/sh

# Preliminary stuff

export CC=mpicc
export CXX=mpiCC # may be mpic++ on some systems
export CFLAGS='-w'
export CPPFLAGS=${CFLAGS}
export FC=mpif90
export FCFLAGS='-w'

# Configure HDF5 with support for MPI, Fortran and shared libraries

./configure --enable-shared --prefix=${HOME}/hdf5 --enable-fortran --enable-production --enable-parallel --with-szlib=${HOME}/szip --with-pthread

# This patches 'libtool'. It is assumed that '-fPIC' produces PIC code, and
# that '-Wl,' sends an option to the linker. This may not work on MacOS.

mv -f libtool libtool.old
sed 's/wl=\"\"/wl=\"-Wl,\"/g' libtool.old | sed 's/pic_flag=\"\"/pic_flag=\" -fPIC -DPIC\"/g' > libtool

---------

II. Compiling HDF5 using the serial compilers with additional MPI switches

This approach is recommended when option I does not work. It is also
recommended on Mac OS-X / Darwin. This is because support for HDF5 shared
libraries on the Mac is not yet complete and may change in the future. Also,
the flags for getting PIC code on the Mac are less obvious than on Linux,
so it is best to let the configure script deal with that.

The proper switches and directories can be obtained via 'mpif90 -show' or
'mpif90 -showme', depending on the MPI implementation. For example (mpich
on Mac OS-X, non-standard compilation to include Fortran support):

$ mpif90 -show
gfortran -I/usr/local/mpich2/include -I/usr/local/mpich2/include -L/usr/local/mpich2/lib -lmpichf90 -lmpichf90 -lpmpich -lmpich -lopa -lmpl -lpthread

Configuration can then be done as follows (adjust directories where needed):

---------

#!/bin/sh

# Preliminary stuff. We have to set all MPI directories and libraries by
# hand.

MPI_ROOT=/usr/local/mpich2

export CC=gcc
export CXX=g++
export CFLAGS="-w -I${MPI_ROOT}/include"
export CPPFLAGS=${CFLAGS}
export FC=gfortran
export FCFLAGS="-w -I${MPI_ROOT}/include"
export LDFLAGS="-L${MPI_ROOT}/lib"
export LIBS='-lmpichf90 -lpmpich -lmpich -lopa -lmpl -lpthread'

# Configure HDF5 with support for MPI, Fortran and shared libraries

./configure --enable-shared --prefix=${HOME}/hdf5 --enable-fortran --enable-production --enable-parallel --with-szlib=${HOME}/szip --with-pthread

# Libtool should now be OK, so no patch needed.

---------

III. Alternatives.

If I and II do not work, it will be necessary to drop one of the following:
Fortran support (--disable-fortran), MPI support (--disable-parallel) or
shared-library support (--disable-shared). Of these, shared-library support
is the option most likely to be dispensable. Configuration and build should
be straightforward after that.

IV. Fortran 2003

Once the Fortran interface is working correctly and if the Fortran compiler
supports it, Fortran 2003 support can be included in the HDF5 build via
"--enable-fortran --enable-fortran2003" (both options must be provided).

