
#  Makefile for FLASH code.  Automatically generated by setup script.
#  Do not edit!

MAKEDISPLAY = 1
REORDERFLAG = 0
FLASHBINARY = true
USEOPENMP = 0


# -s => Do not print the actual command being executed
# -r => Do not use any implicit rules (speeds up performance)
# -d => Print debugging information on how make is making decisions
ifeq ("$(MAKEDISPLAY)","1")
MAKEFLAGS = 
else
MAKEFLAGS = -s 
endif

EXE = flash4

.PHONY: default

default: $(EXE)


#	Machine-dependent include file

CDEFINES = -DMAXBLOCKS=10 -DNXB=20 -DNYB=20 -DNZB=1 -DN_DIM=2
FDEFINES = $(MDEFS)-DMAXBLOCKS=10 $(MDEFS)-DNXB=20 $(MDEFS)-DNYB=20 $(MDEFS)-DNZB=1 $(MDEFS)-DN_DIM=2

#	print the compiler flags to file in FLASH/object/
#	(files name are also hard-coded into make_bstats)

PRINT_F77_FLAGS = @$(ECHO) F77: $(FCOMP) $(FFLAGS) $(FDEFINES)
PRINT_F90_FLAGS = @$(ECHO) F90: $(FCOMP) $(FFLAGS) $(F90FLAGS) $(FDEFINES)
PRINT_C_FLAGS = @$(ECHO) C: $(CCOMP) $(CFLAGS) $(CDEFINES)
PRINT_L_FLAGS = @$(ECHO) Linker: $(LINK) $(LFLAGS) $(EXE) \(Object files of units\) $(LIB) $(CONFIG_LIB)
PRINT_FLAGS_FILE = setup_flags
SUCCESS_FILE = .success

include Makefile.h


# define touch and mv command if not already defined in Makefile.h
TOUCH ?= touch
MV ?= mv

FFLAGS := $(FFLAGS_HDF5) $(FFLAGS_HYPRE) $(FFLAGS_OPT)
LFLAGS := $(LFLAGS_OPT)
LIB := $(LIB_HDF5) $(LIB_MPI) $(LIB_HYPRE) $(LIB_OPT)
CFLAGS := $(CFLAGS_HDF5) $(CFLAGS_HYPRE) $(CFLAGS_OPT)


ifeq ("$(USEOPENMP)","1")
#In most cases we can just define a variable named OPENMP in our Makefile.h.
#This is not always possible when we mix compilers, e.g. absoft (for Fortran)
#which uses '-openmp' and gcc (for C) which uses '-fopenmp' - in this
#situation we would define OPENMP_FORTRAN, OPENMP_C and OPENMP_LINK.
ifdef OPENMP_FORTRAN
FFLAGS := $(OPENMP_FORTRAN) $(FFLAGS)
else
FFLAGS := $(OPENMP) $(FFLAGS)
endif

ifdef OPENMP_C
CFLAGS := $(OPENMP_C) $(CFLAGS)
else
CFLAGS := $(OPENMP) $(CFLAGS)
endif

ifdef OPENMP_LINK
LFLAGS := $(OPENMP_LINK) $(LFLAGS)
else
LFLAGS := $(OPENMP) $(LFLAGS)
endif
endif

ifeq ("$(MAKEDISPLAY)","0")
define ECHO-COMPILING
@$(ECHO) Compiling $<
endef
else
define ECHO-COMPILING
endef
endif

ifeq ("$(MAKEDISPLAY)","0")
define ECHO-PROCESSING
@$(ECHO) Processing $<
endef
else
define ECHO-PROCESSING
endef
endif

#	Compile



.SUFFIXES:

.SUFFIXES: .f .F .f90 .F90 .c .C .cxx .o
  
%.o : %.f
	$(ECHO-COMPILING) 
	$(FCOMP) $(FFLAGS) $(FDEFINES) $<
%.o : %.F
	$(ECHO-COMPILING) 
	$(FCOMP) $(FFLAGS) $(FDEFINES) $<
%.o : %.f90
	$(ECHO-COMPILING) 
	$(FCOMP) $(FFLAGS) $(f90FLAGS) $(FDEFINES) $<
%.o %.mod : %.F90
	$(ECHO-COMPILING) 
	$(FCOMP) $(FFLAGS) $(F90FLAGS) $(FDEFINES) $<
ifdef MODUPPERCASE
	-$(if $(wildcard $*.mod),if [ -w $*.mod -a -s $(shell echo $*|tr a-z A-Z).mod -a \( $(shell echo $*|tr a-z A-Z).mod != $*.mod \) ] ;then ln -f $(shell echo $*|tr a-z A-Z).mod $*.mod;fi)
else
	-$(if $(wildcard $*.mod),if [ -w $*.mod -a -s $(shell echo $*|tr A-Z a-z).mod -a \( $(shell echo $*|tr A-Z a-z).mod != $*.mod \) ] ;then ln -f $(shell echo $*|tr A-Z a-z).mod $*.mod;fi)
endif
%.o : %.c
	$(ECHO-COMPILING) 
	$(CCOMP) $(CFLAGS) $(CDEFINES) $<
%.o : %.C
	$(ECHO-COMPILING) 
	$(CPPCOMP) $(CFLAGS) $(CDEFINES) $<
%.o : %.cxx
	$(ECHO-COMPILING) 
	$(CPPCOMP) $(CFLAGS) $(CDEFINES) $<
%API.c %API.h %API-bridges.F90: %.int
	$(ECHO-PROCESSING) 
	./int2API.py $<

.PRECIOUS: %API.c %API.h %API-bridges.F90

# What to do in case we are unable to build an object file

MKFILES = $(shell grep -l $(1) Makefile.* | egrep -v "Makefile.Depend")
UNITNAMES = $(patsubst Makefile.%,%,$(1))
SRCFILES = $(shell ls | grep -i $(basename $(1))\.)

.DEFAULT:
	@$(ECHO) Sorry, I am unable to build $@ mentioned in $(call MKFILES,$@)
	@$(ECHO) Related directory contents: $(call SRCFILES,$@)
	@$(ECHO) If you do not see an appropriate source file, $@ is probably mentioned in the
	@$(ECHO) wrong Makefile and should probably go deeper inside the $(call UNITNAMES,$(call MKFILES,$@)) unit
	@$(RM) -f $(SUCCESS_FILE)
	@exit 1

#       Setup_buildstamp routine

.PHONY: setup_buildstamp.F90

setup_buildstamp.F90: 
	@$(ECHO) Generating Buildstamp
	./make_bstamp

#       Release routine

.PHONY: setup_flashRelease.F90

setup_flashRelease.F90: 
	@$(ECHO) Generating Flash Release
	./make_release

#       Build statistics routine

.PHONY: setup_buildstats.c

setup_buildstats.c: 
	@$(ECHO) Generating Build Statistics
	./make_bstats

# Make the Makefile.Depend 
Makefile.Depend: 
	@$(ECHO) Calculating dependencies
	./setup_depends.py --generateINTERMEDIATElines $(FFLAGS) $(F90FLAGS) $(CFLAGS) *.f *.f90 *.F90 *.F 
	./setup_addcdepends.py $(CFLAGS) *.c

.PHONY: reorder
# run reorder script or kill the script if we dont need it
ifeq ("$(REORDERFLAG)","1")
reorder: Makefile.Depend
	bash reorder.sh
else
reorder:
	rm -f reorder.sh
endif

.PHONY: reorderclean
ifeq ("$(REORDERFLAG)","1")
	bash reorder.sh --clean
endif

#	FLASH Units routine

# include Dependency information
# the -include supresses the warning if Makefile.Depend is not found

-include Makefile.Depend




#	Unit Makefiles

MISC_OBJS = $(MACHOBJ) setup_buildstamp.o setup_flashRelease.o setup_buildstats.o setup_getFlashUnits.o 

include Makefile.Burn
include Makefile.Conductivity
include Makefile.Cool
include Makefile.Cosmology
include Makefile.Deleptonize
include Makefile.Diffuse
include Makefile.Driver
include Makefile.EnergyDeposition
include Makefile.Eos
include Makefile.Flame
include Makefile.Gravity
include Makefile.Grid
include Makefile.Heat
include Makefile.Heat_AD
include Makefile.Heatexchange
include Makefile.Hydro
include Makefile.IO
include Makefile.ImBound
include Makefile.IncompNS
include Makefile.Ionize
include Makefile.Logfile
include Makefile.MagneticResistivity
include Makefile.MassDiffusivity
include Makefile.Multiphase
include Makefile.Multispecies
include Makefile.Opacity
include Makefile.Particles
include Makefile.PhysicalConstants
include Makefile.Polytrope
include Makefile.PrimordialChemistry
include Makefile.Profiler
include Makefile.RadTrans
include Makefile.RuntimeParameters
include Makefile.Simulation
include Makefile.SolidMechanics
include Makefile.Stir
include Makefile.Timers
include Makefile.Viscosity
include Makefile.flashUtilities

ALL_OBJ_FILES = \
       $(Burn) \
       $(Conductivity) \
       $(Cool) \
       $(Cosmology) \
       $(Deleptonize) \
       $(Diffuse) \
       $(Driver) \
       $(EnergyDeposition) \
       $(Eos) \
       $(Flame) \
       $(Gravity) \
       $(Grid) \
       $(Heat) \
       $(Heat_AD) \
       $(Heatexchange) \
       $(Hydro) \
       $(IO) \
       $(ImBound) \
       $(IncompNS) \
       $(Ionize) \
       $(Logfile) \
       $(MagneticResistivity) \
       $(MassDiffusivity) \
       $(Multiphase) \
       $(Multispecies) \
       $(Opacity) \
       $(Particles) \
       $(PhysicalConstants) \
       $(Polytrope) \
       $(PrimordialChemistry) \
       $(Profiler) \
       $(RadTrans) \
       $(RuntimeParameters) \
       $(Simulation) \
       $(SolidMechanics) \
       $(Stir) \
       $(Timers) \
       $(Viscosity) \
       $(flashUtilities) \
       $(MISC_OBJS) 

#Remove duplicate names (side effect is sorting)
ALL_OBJS = $(sort $(ALL_OBJ_FILES))

# DATA_OBJS contains all object files which define modules, rest are CODE_OBJS
# CODE_OBJS = ALL_OBJS - DATA_OBJS
CODE_OBJS = $(filter-out $(DATA_OBJS),$(ALL_OBJS))

#	Link
.PHONY: printflags
printflags:
ifeq ("$(MAKEDISPLAY)","0")
	@$(ECHO) Compiler and Flags Info follows
	$(PRINT_F77_FLAGS)
	$(PRINT_F90_FLAGS)
	$(PRINT_C_FLAGS)
	$(PRINT_L_FLAGS)
endif
	@$(RM) $(PRINT_FLAGS_FILE)
	@$(RM) -f $(SUCCESS_FILE)
	@$(TOUCH) $(PRINT_FLAGS_FILE)
	$(PRINT_F77_FLAGS) >> $(PRINT_FLAGS_FILE)
	@$(ECHO)  >> $(PRINT_FLAGS_FILE)
	$(PRINT_F90_FLAGS) >> $(PRINT_FLAGS_FILE)
	@$(ECHO)  >> $(PRINT_FLAGS_FILE)
	$(PRINT_C_FLAGS) >> $(PRINT_FLAGS_FILE)
	@$(ECHO)  >> $(PRINT_FLAGS_FILE)
	$(PRINT_L_FLAGS) >> $(PRINT_FLAGS_FILE)
	@$(ECHO)  >> $(PRINT_FLAGS_FILE)
	@$(ECHO) Data Object files: >> $(PRINT_FLAGS_FILE)
	@$(ECHO) $(DATA_OBJS) >> $(PRINT_FLAGS_FILE)
	@$(ECHO)  >> $(PRINT_FLAGS_FILE)
	@$(ECHO) Code Object files: >> $(PRINT_FLAGS_FILE)
	@$(ECHO) $(CODE_OBJS) >> $(PRINT_FLAGS_FILE)

.PHONY: data code clean distclean

data: $(DATA_OBJS)

code: data $(CODE_OBJS) 

$(EXE) : printflags reorder data code
	@$(ECHO) Linking in Units and Libraries 
	$(LINK) $(LFLAGS) $(EXE) $(ALL_OBJS) $(LIB) $(CONFIG_LIB)
	@$(ECHO) SUCCESS
	@$(TOUCH) $(SUCCESS_FILE)

#	Clean up object directory

clean:
	$(RM) $(PRINT_FLAGS_FILE) *.o *.mod *.a *.unit *API.h *API.c *API-bridges.F90

distclean: clean reorderclean
	$(RM) Makefile.Depend

precision_test: precision_test.o
	$(LINK) $(LFLAGS) precision_test precision_test.o

