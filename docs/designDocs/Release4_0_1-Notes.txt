SOME FIXES APPLIED TO THE FLASH4 BRANCH.

* Non-symmetric matrix generated by our AMR HYPRE adapter in certain
  situations.  The constructed matrix was not symmetric, because there
  was a mismatch between the order in which graph edges where created
  and given values for some cells.  This only affected coarse cells
  that have finer neighboring cells across more than one cell face.
  r18739 [trunk] Klaus

   Checked with Petros - no known errors with AMG+PCG.

* PFFT fixes for unusual pencil grid configurations
  (when there are too few MPI tasks to divide up work
  in a balanced way).

   See e-mail Chris to Mateusz
   P. Ricker still has problems with "DirectSolver" on Kraken, but he
   agrees that "it's probably something to do with underlying libraries and/or compilers".
   make note in announce - sugggest people use HomBcTrigSolver

  Also:
  This may be needed in order to use PfftSolver=SimplePeriodic with the hybrid (Multigrid+) Poisson solve
  r17986 [trunk] klaus 1012-10-05

* Fixed a long-standing bug in active particle time advancement, where
  the old timestep was being used to advance the particle positions
  instead of the current one. This only affects active particles with
  mass that are being advanced using the leapfrog time advancement
  routine (without cosmology).  (r18678 [trunk - partial] | zuhone | 2013-01-14)

* Several bug fixes of the BHTree. The bugs may lead to
  code crashes in case of non-cubic computational domains.
  (r18825 [flash4] Richard Wunsch 2013-01-05)
  ((prereq r17970 ???))
  Also generalized BHTree to not assume in some places that the source
  variable is DENS_VAR.
  (r19041 [flash4] John ZuHone / klaus 2013-02-20)

* Fix for how root block boundary positions are computed.
  Avoids rightmost block boundaries that do not exactly coincide
  with rightmost domain boundary when they should.
  This patch may lead to slight block bounding box differences in
  setups that use nBlockX, nBlockY, or nBlockZ different from 1.
  r17997+r18052 [trunk] Klaus
   
   No, since it changes checkpoint files!
   Include related GridMain patch instead:
   (r18053 [trunk - partial] | klaus | 2012-10-12 23:32:16 -0500 (Fri, 12 Oct 2012))
   Changed paths:
     M /trunk/source/Grid/GridMain/paramesh/Paramesh2/Grid_getBlkBC.F90
     M /trunk/source/Grid/GridMain/paramesh/paramesh4/Grid_getBlkBC.F90
   ( M /trunk/source/Grid/GridSolvers/HYPRE/gr_hypreApplyBcToFace.F90 )
   Use comparison with a tolerance, instead of testing for
   exact equality, in Grid_getBlkBC.  The tolerance depends
   on the minimum cell spacing.

* r18212 [flash4] Petros
  fixed a bug in viscosity

* r18220 | klaus | 2012-11-08 22:36:21 -0600 (Thu, 08 Nov 2012) | 29 lines
Changed paths:
   M /branches/flash4/source/Grid/GridMain/paramesh/paramesh4/Paramesh4dev/PM4_package/source/amr_1blk_guardcell_srl.F90

Fixed indexing error introduced by me in trunk in r17650.

Mateusz Ruszkowski reported runtime failures like this:[...]

I traced the failure back to this bug.  Mateusz then reported that the
fix I am now committing seems to have fixed the situation for him.

This error would have affected guard cell filling for face variables
only in some completely diagonally situated guard cell regions, only in 3D.

* Applied fix r18170 [flash4] | petros | 2012-11-01 09:33:14 -0500 (Thu, 01 Nov 2012)

  "modified the current calculation when adding the resistive fluxes
  as the upwinded/minmoded approach the code failed at the Resistive test
  Derivatives are now computed as in PLUTO but the previous formalism is
  kept. We could add a switch between them should this implementation
  prove sub-par in certain cases"


*** Fix access to logical dummy arguments when they are not present ***
* "Avoid references to optional dummy arguments when they are not
  present." One must not assume short-circuit evaluation of logical
  expressions in Fortran.
  * r18896 [flash4] | klaus | 2013-02-07 13:37:33 -0600 (Thu, 07 Feb 2013)
  * originally r16248+r18891 (by Chris) in project-pfftRT

LARGER CHANGES TO THE FLASH4 BRANCH.

* Fixes to the new Multipole Posson solver.  Ongoing work,
  not yet in /branches/flash4/source/Grid/GridSolvers/Multipole_new.

   deferred.

* Ray tracing changes. New runtime parameters, etc.
  (See documentation [being?]) updated in User's Guide.

   deferred.


NEXT RELEASE: (maybe September?)
  bittree-based dist/ redist of particles
  resistivity
  Biermann battery
  performance improvements (incl., in particluar, unsplit Hydro)
  Ray trace changes
  Multipole_new fixes
  Sinkparticles? - Christoph Federrath
  Changes of defaults:
    - HomBcTrigSolver instead of DirectSolver
    - Orrery avoidance without explicit +pm4dev
  (already in trunk:
   surrblks in checkpoint file
  )


***** ORIGINAL RELEASE-NOTES FOR FLASH 4.0 FOLLOWS *****
The Flash Center is pleased to announce the release of the next
version of the FLASH code, version 4.0. FLASH 4.0 closely follows 
the architecture of FLASH3. The major changes from FLASH3 are
several new capabilities in both physics solvers and infrastructure.
A major part of the new physics capabilities were introduced to
support simulations of high-energy-Density physics (HEDP).
FLASH4 also includes four major capabilities contributed by our
external users. 

The major new capabalities in FLASH4 that were not included in FLASH 3
are (the ones marked with **  are external contributions, please see the
User's Guide for references and appropriate credit for these capabilities): 

* 3T capabilities in the split and unsplit Hydro
  solvers. There is support for non-cartesian geometry, and
  the unsplit solver also supports stationary rigid bodies.

* Upwind biased constrained transport (CT) scheme in the unsplit
  staggered mesh MHD solver.

* Full corner transport upwind (CTU) algorithm in the unsplit
  hydro/MHD solver \item Cylindrical geometry support in the unsplit
  staggered mesh MHD solver on UG and AMR. A couple of MHD
  simulation setups using cylindrical geometry. 

* Radiation diffusion
 
* Conduction 

* Heat exchange.

* Multi-Temperature Multi-Material Multi-Table Eos

* Opacities, ability to use hot and cold opacities.

* The laser drive with threading for performance

* A new multipole solver

* Ability to replicate mesh for multigroup diffusion or other
  similar applications.

* OpenMP threading of several important solvers at both
  coarse-grain (one block per thread) and fine-grain (threads within a
  block) levels.

* Ability to add particles during evolution

* Limited support for Chombo as an alternative AMR mesh package

* Several new HEDP simulation setups.

* A new EXPERIMENTAL setup tool ``setup_alt'' intended to be a
  compatible replacement with a cleaner structure.

* Hybrid-PIC    **

* Barnes-Hut tree based gravity solver  **

* Primordial chemistry  **
 
* Sink Particles  **


The release also includes several new features and resolves many bugs
found in previous releases up to 4-beta. The modifications since the
4-beta release include 

* The HEDP capabilities of the code have been exercised more and are
  therefore more robust.

* Laser 3D in 2D ray tracing has been added. The code traces rays in a real 3D
  cylindrical domain using a computational 2D cylindrical domain and is based
  on a polygon approximation to the angular part. 

* New public interface Particles_addNew, which makes it possible to
  add particles to a simulation during evolution. (It has been
  possible to include multiple different types of particles in the
  same simulation since release FLASH 3.1.)

* Fixed reading of particles from checkpoint in -nofbs uniform grid. 

* All I/O implementations now support writing/reading 0
  particles and/or 0 blocks. 

* Support for particles and face variables in the same PnetCDF simulation.

* Optimization of Initializaton.
  Eliminated redundant calls to orrery at simulation startup.
  Ability to run the orrery in a reduced communicator in order to
  speed up FLASH initialization.  The original orrery can be restored
  by setting the parameter use_reduced_orrery to .false..  

* Ability to avoid unnecessary calls of guard cell filling.
  Ability to avoid a subsequent guard cell fill when a unit declares
  that it only reads mesh data.  It is off by default, but can be
  turned on by setting the parameter reduceGcellFills to .true..  

There are a few other changes from the beta release :

* Removed custom region code and Grid API routines. 

* PARAMESH4DEV has become the default Grid implementation.  

* PARAMESH4DEV does not need an amr_runtime_parameters file
  any more.  The corresponding parameters are now set in
  a parameter file, like other FLASH runtime parameters. 

The following features are provided on an EXPERIMENTAL basis.
They may only work in limited circumstances and/or have not
yet been tested to our satisfaction.

* New EXPERIMENTAL configuration tool, "setup_alt".  
  Intended to be a compatible replacement for "setup" with
  a cleaner structure.

* Electron-Entropy Advection in Hydro for non-ideal Eos.  

* New cubic and quartic equation solvers have been added and
  are ready to be used. They return only real cubic and quartic roots.
  The routines are in the flashUtilites/general section and their
  names are: 'ut_cubicRealRoots' and 'ut_quarticRealRoots'. 


Known Limitations:

* The new multipole solver is missing the ability to treat
  a non-zero minimal radius for spherical geometries, and the
  ability to specify a point mass contribution to the potential.

* Usage of the Split diffusion solver in FLASH4 is only for debugging
  purposes and not generally recommended for usage.
  Split diffusion has not been tested with PARAMESH.

* Some configurations of hydrodynamic test problems with Chombo grid
  show worse than expected mass and total energy conservation.  Please
  see the Chombo section in Hydro chapter of the FLASH user guide for
  details.

* We have experienced the following abort when running
  IsentropicVortex problem with Chombo Grid:
  "MayDay: TreeIntVectSet.cpp:1995: Assertion `bxNumPts != 0' failed. !!!"
  We have been in contact with the Chombo team to resolve this
  issue.

* The Absoft compiler produces erroneous results with optimization in
  gr_markRefineDerefine routine. The results are fine without
  optimization. There may be other files with similar behavior, but
  this is the only one we are aware of.

* The PG compiler fails to compile source files which contain OpenMP
  parallel regions that reference threadprivate data.  This happens in
  the threaded versions of the Multipole solver and the within block
  threaded version of split hydro.  A workaround is to remove
  "default(none)" from the OpenMP parallel region.

* The unsplit hydro solver has an issue with preserving symmetry in 
  non-fixed block size mode in UG.

* The unsplit MHD solver doesn't support the mode "use_GravPotUpdate=.true."
  for 1D when self-gravity is utilized. The solver will still work if it
  is set to be .false. In this case the usual reconstruction schemes 
  will be used in computing the gravitational accelerations at the 
  predictor step (i.e., at the n+1/2 step) rather than calling the
  Poisson solver to compute them.

* The -index-reorder setup flag does not work in all the configurations.
  If you wish to use it please contact the FLASH team. 


The release is available at:

http://flash.uchicago.edu/site/flashcode/

A stripped-down version of FLASH3 that may be downloaded without a
license is also available at the same site. 
This version is essentially the FLASH framework without any
implementations.  The Flash Center is also providing support for
"add-ons" to the code. Please see the section on "What's new in this
release" in the first chapter of the User's Guide for details.
Also, a collection of stand-alone mini-apps are available for download
under the general FLASH license from the same site. 

Additionally, the FLASH testing software FlashTest, which became
available with the FLASH3 beta release, continues to be available for
download at:

http://flash.uchicago.edu/site/flashcode/

Many, but not all parts of FLASH4 are backwards-compatible with
FLASH2. There are no architectural changes from FLASH3 to FLASH4. The
Flash code group has written extensive documentation 
detailing how to make the transition from FLASH2 to FLASH3 as smooth
as possible.  The user should look to:

http://flash.uchicago.edu/site/flashcode/user_support/

The website also contains other documentation including
a User's Guide and a developer's section.  A new feature in FLASH3
documentation is the online description of the public interface
routines to various code units.


FLASH should be portable to most UNIX-like operating systems with a 
python interpreter, Fortran 90 compiler,  C compiler, and MPI library. 
It has been used in production mode, or undergone regular testing on            
the following platforms. 

 
-- IBM BlueGene/P and Power5

   compilers : FORTRAN90 : xlf90

               C         : xlc

-- CRAY-XT4 system

   compilers : FORTRAN90 : Portland Group Fortran 90

               C         : gcc

-- Linux

   compilers: FORTRAN90 : Portland Group Fortran 90
                     
                          Lahey/Fujitsu Fortran 95 

                          Intel Fortran Compiler
    
                          gFortran (known to have trouble with versions
                              before 4.1.0)

                          NAGWare Fortran 95

                          Absoft 
   
              C         : gcc

                          Portland Group C Compiler
 
                          Intel C++ Compiler       
 
-- MAC-OSX

   compilers : FORTRAN90 : gFortran

               C         : gcc



FLASH uses libraries such as MPI for communication, Paramesh
and Chombo for AMR, HDF5 or PnetCDF for IO, and Hypre for linear
solvers. The source for Paramesh 4 is included in two variants in the 
distribution; the versions included in this release are
equivalent to Paramesh 4.0 and Paramesh 4.1, respectively.
Some earlier versions of HDF5, for example 1.6.1, have been known to
have issues with FLASH. We recommend using version 1.6.2 or higher of
the HDF5 library.

Two options are available to visualize FLASH output data. One is 
Fidlr, the IDL based visualization tool included in the
distribution. Fidlr requires IDL version 6.1 or higher to work correctly.
A more extensive option is VisIt, a visualization tool from LLNL,
available from

http://flash.uchicago.edu/site/flashcode/visit and
https://wci.llnl.gov/codes/visit

Visit supports FLASH data output Format.Information on using
Visit with FLASH is contained on the website above.

Development of the FLASH Code was funded by the DOE-supported
ASC/Alliance Center for Astrophysical Thermonuclear Flashes,
and continues to be funded by DOE NNSA and NSF.  We
acknowledge support received from Lawrence Livermore National
Laboratory and the University of Chicago.

All publications resulting from the use of the FLASH Code must
acknowledge the Flash Center for Computational Science.
  Addition of the following text to the paper acknowledgments
will be sufficient.

         "The software used in this work was in part developed by the
         DOE-supported Flash Center for Computational Science
         at the University of Chicago."

