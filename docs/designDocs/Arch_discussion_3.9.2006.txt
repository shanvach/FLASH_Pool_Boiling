Discussion of Architecture Issues

Anshu's proposal:

Separate out each implementation of a unit

Grid

   *GridMain
	*common
	    *paramesh
		*PM2
		*PM3
	    *UG

   *GridParticles
	*GridParticlesImpl
   

Particles
   *ParticlesMain
	*active
	*passive

   *ParticlesMapping
	*quadratic
	*CIC

   *ParticlesInitialization
	*Lattice
	*Dens



Stubs sit at multiple levels.
Each 'sub unit' would have stubs that could be gr_updateParticlesRefinement.
The setup script would parse down one more level and include the stubs at Grid/GridParticles/ 
rather than now where it just stops at Grid/

Doesn't make the distinction between between 'sub units' that are necessary like in Particles mapping
and 'sub units' which are stand alone like GridParticles

Pros -
*Solves most of our problems


Cons -
*Increases the lenght of path names 
*Adds another layer
*Katie thinks it is quite late to be changing our code architecture 1 month before the release.
*Katie doesn't have any problem keeping all functions in the API


Dan's Proposal 

Dan's idea is similar to Anshu's, not sure where to put the stubs.


Katie still sees the distinction between GridParticles and ParticlesMapping ??  Do we care?


Katie's Proposal
Keep light and flexible and don't force heavy architecture on user.  Basically keep architecture
the same.  Change names of directories if necessary to be more clear.  Make the distinction 
between GridParticles and mapping, timeIntegration subdirectories since GridParticles is a 
'stand alone' subunit.  Keep subunit routines in the API even if they are only called by same 
Unit. 

Pros
*Doesn't add additional layer.

Cons
*Lynn and Anshu don't like internal 'subunit' routine stub sitting in API.
*Doesn't clearly distinguish between directories with routines which implement 
  the API and those which don't.


******************************************************************

Compromise Proposal  - No additional layering, but make name spaces clear for those
		     directories which implement a part of the API.  Include a place
		     for internal routine stubs (localAPI).

Particles
   *ParticlesTimeIntegration
   *ParticlesMapping
   *ParticlesInitialization
   *localAPI
   *utilities

Grid
   *GridMain
   *GridParticles
   *localAPI
   *utilities
   *interpolation




-A "Sub Unit" is a directory which implements at least one function in the Global API
    In this sense, GridParticles, GridMain, ParticlesTimeIntegeration, ParticlesMapping,
    ParticlesInitialization are all "Sub Units".  If a directory is going to implement
    a routine in the API it should have the name of the unit, "UnitSomething".

-The 'localAPI' directory holds stubs for routines which need to communicate between Sub Units
    It is only necessary to add a routine to the localAPI directory if one subunit can be included
    without another.  Particles, for example, probably doesn't need any of its local functions
    in the localAPI.  Grid definitely must have gr_updateParticleRefinement in the localAPI because
    the Grid unit can be run without particles and Grid_updateRefinement must call 
    gr_updateParticleRefinement and still work if particles are not included.  The high level
    unit is responsible for having a Config which requires the 'localAPI' if necessary.
    The 'localAPI' directory is flexible and if any unit needs to have a local stub it can be
    added here.  (We anticipate other units like Burn may need this functionality.)


-All other directories are 'helper' directories and can include solvers, various
    interpolations, utilities or whatever.  

