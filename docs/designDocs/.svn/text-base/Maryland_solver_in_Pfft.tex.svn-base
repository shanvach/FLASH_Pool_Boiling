
Initialization :

foreach dimension
  if(transform)
      {allocate space; isplane=false; initialize trigonometric table;
       calculate local bounds}
  elseif(row_solve)
      {allocate space; isplace=false; initialize for tridiagonal solve;
       calculate local bounds}
  else
     {verify py=1; isplane=true; initialize for plane solve;
      calculate local bounds}
  endif
end for

Computation

   if(forward) 
     {
       transform(dimension(x))
       distributed_transpose(xyz to yzx)
       if(isplane)
         do plane solver
         distributed_transpose(yzx to xyz)
       else
         apply y_solver !! could be transform or tridiagonal
         distributed_transpose(yzx to zxy)
	 apply z_solver
     }
   else
     if( ! isplane)
       if(z_is_transform)inverse_transform(z)
       distributed_transpose(zxy to yzx)
       if(y_is_transform)inverse_transform(y)
       distributed_transpose(yzx to xyz)
     endif
     inverse_transform(x)
   endif
   